/* BORDER

    $sides: border side
    $width: border width
    $color: border color
*/
@mixin border(
    $sides: (
        all,
    ),
    $width: 1px,
    $color: map-get($border, "color")
) {
    border: 0;
    box-sizing: border-box;

    @each $side in $sides {
        @if $side == all {
            border: $width solid $color;
        } @else if $side == 0 {
            border: 0;
        } @else {
            border-#{$side}: $width solid $color;
        }
    }
}

/* BORDER-RADIUS

    $radius: radius amount
    $side: radius side
*/
@mixin border-radius($radius, $sides: (all)) {
    @each $side in $sides {
        @if $side == all {
            border-radius: $radius;
        } @else {
            border-#{$side}-radius: $radius;
        }
    }
}

/* MEDIA QUERY
    $device: [ 'mobile', 'pad', 'tablet', 'pixelsAmount', 'desktop' ]
*/
@mixin device($device) {
    @if $device == mobile {
        @media screen and (max-width: map-get($breakpoints, tablet)) {
            @content;
        }
    }

    @if $device == pad {
        @media screen and (min-width: map-get($breakpoints, tablet)) {
            @content;
        }
    }

    @if $device == padOnly {
        @media screen and (min-width: map-get($breakpoints, tablet)) and (max-width: map-get($breakpoints, desktop)) {
            @content;
        }
    }

    @if $device == desktop {
        @media screen and (min-width: map-get($breakpoints, desktop)) {
            @content;
        }
    } @else {
        @media screen and (min-width: $device) {
            @content;
        }
    }
}

/* ELEMENT SIZE
    $width
    $height
*/
@mixin size($width, $height: $width) {
    width: $width;
    height: $height;
}

/* FLEX

    $xAxis: horizontal flex direction
    $yAxis: vertical flex direction
*/
@mixin flex($xAxis: "", $yAxis: "") {
    display: flex;
    flex-wrap: wrap;

    @if $xAxis == "start" {
        justify-content: flex-start;
    } @else if $xAxis == "end" {
        justify-content: flex-end;
    } @else if $xAxis == "between" {
        justify-content: space-between;
    } @else if $xAxis == "around" {
        justify-content: space-around;
    } @else {
        justify-content: center;
    }

    @if $yAxis == "start" {
        align-items: flex-start;
    } @else if $yAxis == "end" {
        align-items: flex-end;
    } @else if $yAxis == "stretch" {
        align-items: $yAxis;
    } @else {
        align-items: center;
    }
}

/* FONT FAMILY */
@mixin font-family($el) {
    font-family: map-get($fontFamily, $el);
}

/* FONT SIZE & LINE-HEIGHT

    $size: font size
    $lineHeight: $size + $ratio
*/
@mixin font-size($size, $ratio: 6, $lineHeight: $size + $ratio) {
    font-size: $size;
    line-height: $lineHeight;
}

/* GRID

    $count: amount of aligned items
    $gap: space between items
*/
@mixin grid($count, $gap) {
    display: grid;
    gap: $gap;
    grid-template-columns: repeat($count, 1fr);
}

/* PSUEDO
    $content
*/
@mixin psuedo($kind: after, $content: "") {
    &:#{$kind} {
        content: $content;
        @content;
    }
}

@mixin spacing($decider, $multiplier, $sides: (all)) {
    box-sizing: border-box;

    @each $side in $sides {
        @if $side == all {
            @media screen and (max-width: map-get($breakpoints, tablet)) {
                #{$decider}: map-get($spacing, mobile) * $multiplier;
            }
            @media screen and (min-width: map-get($breakpoints, tablet)) {
                #{$decider}: map-get($spacing, tablet) * $multiplier;
            }
            @media screen and (min-width: map-get($breakpoints, desktop)) {
                #{$decider}: map-get($spacing, desktop) * $multiplier;
            }
        } @else {
            @media screen and (max-width: map-get($breakpoints, tablet)) {
                #{$decider}-#{$side}: map-get($spacing, mobile) * $multiplier;
            }
            @media screen and (min-width: map-get($breakpoints, tablet)) {
                #{$decider}-#{$side}: map-get($spacing, tablet) * $multiplier;
            }
            @media screen and (min-width: map-get($breakpoints, tablet)) {
                #{$decider}-#{$side}: map-get($spacing, desktop) * $multiplier;
            }
        }
    }
}
