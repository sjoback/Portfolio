/* FLEX

    $xAxis: horizontal flex direction
    $yAxis: vertical flex direction
*/
@mixin flex( $xAxis: "", $yAxis: "" ) {
    display: flex;
    flex-wrap: wrap;

    @if $xAxis == 'start' { justify-content: flex-start; }
    @else if $xAxis == 'end' { justify-content: flex-end; }
    @else if $xAxis == 'between' { justify-content: space-between; }
    @else if $xAxis == 'around' { justify-content: space-around; }
    @else { justify-content: center; }

    @if $yAxis == 'start' { align-items: flex-start; }
    @else if $yAxis == 'end' { align-items: flex-end; }
    @else if $yAxis == 'stretch' { align-items: $yAxis; }
    @else { align-items: center; }
}


/* BORDER

    $sides: border side
    $width: border width
    $color: border color
*/
@mixin border( $sides: ( all ), $width: 1px, $color: map-get($border, color) ) {
    border: 0;

    @each $side in $sides {
        @if $side == all {
            border: $width solid $color;
        }
        @else {
            border-#{$side}: $width solid $color;
        }
    }
}


/* FONT SIZE & LINE-HEIGHT

    $size: font size
    $lineHeight: $size + $ratio
*/
@mixin font-size( $size, $ratio: 6, $lineHeight: $size + $ratio ) {
    font-size: $size;
    line-height: $lineHeight;
}


/* BORDER-RADIUS

    $radius: radius amount
    $side: radius side
*/
@mixin border-radius( $radius, $sides: ( all ) ) {
    @each $side in $sides {
        @if $side == all {
            border-radius: $radius;
        }
        @else {
            border-#{$side}-radius: $radius;
        }
    }
}

/* MEDIA QUERY
    $device: accepts 'mobile', 'pad', 'padOnly' or 'desktop'
*/
@mixin device($device) {
    @if $device == mobile {
        @media screen and (max-width: map-get($breakpoints, tablet)) { @content; }
    }

    @if $device == pad {
        @media screen and (min-width: map-get($breakpoints, tablet)) { @content; }
    }

    @if $device == padOnly {
        @media screen and (min-width: map-get($breakpoints, tablet)) and (max-width: map-get($breakpoints, desktop)) { @content; }
    }

    @if $device == desktop {
        @media screen and (min-width: map-get($breakpoints, desktop)) { @content; }
    }
}

/* ELEMENT SIZE
    $width
    $height
*/
@mixin size( $width, $height: $width ) {
    width: $width;
    height: $height;
}

/* OVERLAY
    $background
    $z-index
    $opacity
*/
@mixin overlay( $background, $opacity, $zIndex: 0 ) {
    position: fixed;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    background: $background;
    z-index: $zIndex;
    opacity: $opacity;
}


/* PSUEDO ELEMENT
    $content
*/
@mixin psuedo( $kind: after, $content: '' ) {
    &:#{$kind} {
        content: $content;
        @content;
    }
}
